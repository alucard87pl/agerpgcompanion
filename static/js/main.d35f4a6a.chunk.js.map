{"version":3,"sources":["components/Ability.js","components/AbilityPanel.js","App.js","serviceWorker.js","index.js"],"names":["Ability","props","onChangeValue","bind","onChangeMod","state","abiVal","abiMod","this","setState","val","console","log","target","value","modLookup","forceUpdate","mod","x","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","name","type","onChange","min","max","step","map","key","Component","AbilityPanel","abilities","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAEqBA,E,YACpB,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,MAAL,eAAkBJ,EAAlB,CAAyBK,OAAQ,EAAGC,OAAQ,IAJ1B,E,iFAQlBC,KAAKC,SAAS,CAAEH,OAAQ,EAAGC,OAAQ,M,oCAGtBG,GACbC,QAAQC,IAAI,uBAAwBF,EAAIG,OAAOC,OAC/CH,QAAQC,IAAI,uBAAwBJ,KAAKO,UAAUL,EAAIG,OAAOC,QAC9DN,KAAKC,SAAS,CAAEH,OAAQI,EAAIG,OAAOC,MAAOP,OAAQC,KAAKO,UAAUL,EAAIG,OAAOC,QAAUN,KAAKQ,iB,kCAGhFC,GACXN,QAAQC,IAAI,uBAAwBK,EAAIJ,OAAOC,OAC/CH,QAAQC,IAAI,4BACZJ,KAAKC,SAAS,CAAEF,OAAQU,EAAIJ,OAAOC,MAAOR,OAAQ,Q,gCAGzCY,GAoBT,MAnBc,CACbC,GAAM,EACNC,GAAM,EACNC,GAAM,EACNC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,GAAK,EACLC,GAAK,EACLC,GAAK,EACLC,GAAK,EACLC,GAAK,EACLC,GAAK,EACLC,GAAK,EACLC,GAAK,EACLC,GAAK,GAEehB,K,+BAIrB,OACC,6BACEV,KAAKH,MAAM8B,KADb,MACsB,IACrB,2BACCC,KAAK,SACLtB,MAAON,KAAKH,MAAMC,OAClB+B,SAAU7B,KAAKN,cACfoC,IAAK,EACLC,IAAK,GACLC,KAAM,IACJ,IATJ,MAUK,IACJ,4BAAQ1B,MAAON,KAAKH,MAAME,OAAQ8B,SAAU7B,KAAKJ,aAC/C,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIqC,KAAI,SAACvB,GAAD,OAAO,4BAAQwB,IAAKxB,GAAIA,Y,GA5DvByB,aCwBtBC,EAvBf,YACC,WAAY3C,GAAQ,IAAD,8BAClB,4CAAMA,KACDI,MAAQ,CACZwC,UAAY,CACX,WACA,gBACA,eACA,YACA,WACA,eACA,aACA,WACA,cAZgB,EADpB,sEAmBE,OAAO,6BAAMrC,KAAKH,MAAMwC,UAAUJ,KAAI,SAACvB,GAAD,OAAO,kBAAC,EAAD,CAASwB,IAAKxB,EAAGiB,KAAMjB,YAnBtE,GAAkCyB,aCOnBG,EANf,iLAEE,OAAO,kBAAC,EAAD,UAFT,GAAyBH,aCQLI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d35f4a6a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Ability extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.onChangeValue = this.onChangeValue.bind(this);\r\n\t\tthis.onChangeMod = this.onChangeMod.bind(this);\r\n\t\tthis.state = { ...props, abiVal: 7, abiMod: 0 };\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.setState({ abiVal: 7, abiMod: 0 });\r\n\t}\r\n\r\n\tonChangeValue(val) {\r\n\t\tconsole.log('Value changed to:   ', val.target.value);\r\n\t\tconsole.log('Modifier should be: ', this.modLookup(val.target.value));\r\n\t\tthis.setState({ abiVal: val.target.value, abiMod: this.modLookup(val.target.value) }, this.forceUpdate());\r\n\t}\r\n\r\n\tonChangeMod(mod) {\r\n\t\tconsole.log('Modifier changed! : ', mod.target.value);\r\n\t\tconsole.log('Should reset Value to 7!');\r\n\t\tthis.setState({ abiMod: mod.target.value, abiVal: '7' });\r\n\t}\r\n\r\n\tmodLookup(x) {\r\n\t\tvar rollMap = {\r\n\t\t\t3  : -2,\r\n\t\t\t4  : -1,\r\n\t\t\t5  : -1,\r\n\t\t\t6  : 0,\r\n\t\t\t7  : 0,\r\n\t\t\t8  : 0,\r\n\t\t\t9  : 1,\r\n\t\t\t10 : 1,\r\n\t\t\t11 : 1,\r\n\t\t\t12 : 2,\r\n\t\t\t13 : 2,\r\n\t\t\t14 : 2,\r\n\t\t\t15 : 3,\r\n\t\t\t16 : 3,\r\n\t\t\t17 : 3,\r\n\t\t\t18 : 4\r\n\t\t};\r\n\t\tlet result = rollMap[x];\r\n\t\treturn result;\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.state.name} is{' '}\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\tvalue={this.state.abiVal}\r\n\t\t\t\t\tonChange={this.onChangeValue}\r\n\t\t\t\t\tmin={3}\r\n\t\t\t\t\tmax={18}\r\n\t\t\t\t\tstep={1}\r\n\t\t\t\t/>{' '}\r\n\t\t\t\tat {' '}\r\n\t\t\t\t<select value={this.state.abiMod} onChange={this.onChangeMod}>\r\n\t\t\t\t\t{[ -2, -1, 0, 1, 2, 3, 4 ].map((x) => <option key={x}>{x}</option>)}\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport Ability from './Ability';\r\n\r\nexport class AbilityPanel extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tabilities : [\r\n\t\t\t\t'Accuracy',\r\n\t\t\t\t'Communication',\r\n\t\t\t\t'Constitution',\r\n\t\t\t\t'Dexterity',\r\n\t\t\t\t'Fighting',\r\n\t\t\t\t'Intelligence',\r\n\t\t\t\t'Perception',\r\n\t\t\t\t'Strength',\r\n\t\t\t\t'Willpower'\r\n\t\t\t]\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <div>{this.state.abilities.map((x) => <Ability key={x} name={x} />)}</div>;\r\n\t}\r\n}\r\n\r\nexport default AbilityPanel;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport AbilityPanel from './components/AbilityPanel';\n\nexport class App extends Component {\n\trender() {\n\t\treturn <AbilityPanel />;\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}